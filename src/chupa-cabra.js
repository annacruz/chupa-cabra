#!/usr/bin/env node

var Q = require('q');
var fs = require('fs');
var http = require('http');
var https = require('https');
var prompt = require('prompt');
var checkUpdate = require('check-update');
var pkg = require('../package.json');

prompt.start();
prompt.message = "";
prompt.delimiter = "\"".magenta;

var body = [];

var doRequest = function(protocol, url, partialBody, body, index, deferred){
  protocol.get(url, function(res){
    res.setEncoding('utf8');
    res.on('data', function(chunk){
      partialBody += chunk;
    });
    res.on('end', function(){
      console.log(url + ' => âˆš Done'.green);
      body[index] += partialBody;
      deferred.resolve();
    });
  });
};

var getBody = function(url){
  var deferred = Q.defer();
  var partialBody = ''
  var index = body.length;
  body[index] = index == 0 ? 'Dump generated by chupa-cabra (version: ' + pkg.version +'): \n\n---- ' + url + ' ---- \n\n' : '\n\n---- ' + url + ' ---- \n\n';

  if (exports.isHttp(url)){
    doRequest(http, url, partialBody, body, index, deferred);
  } else if (exports.isHttps(url)){
    doRequest(https, url, partialBody, body, index, deferred);
  }else{
    url = exports.forceHttp(url);
    doRequest(http, url, partialBody, body, index, deferred);  
  }

  return deferred.promise;
};

exports.generateLoop = function(from, to, by){
  var result = [];
  for (var i = from; i <= to; i += by) {
    result.push(i);
  }

  return result;
};

var doLoop = function(from, to, by, url){
  var originalUrl = url;
  var promises = [];
  var loop = exports.generateLoop(from, to, by)

  loop.forEach(function(n){
    url = originalUrl.replace(/\[\d*,\d*,\d*\]/, n);
    promises.push(getBody(url));    
  })

  return Q.allSettled(promises); 
};

exports.validateURL = function(url){
  var result = url.match(/(\w*\W*)?\w*(\.(\w)+)+(\W\d+)?(\/\w*(\W*\w)*)*/g);
  return result != null ? true : false;
};

// TODO: Requests with intervals
// exports.timeout = function(seconds){

// };

exports.isHttp = function(url){
  return url.match(/http:\/\//) != null ? true : false;
};

exports.isHttps = function(url){
  return url.match(/https:\/\//) != null ? true : false;
};

exports.forceHttp = function(url){
  return 'http://' + url;
};

var getExpression = function(url){
  return url.match(/\[\d*,\d*,\d*\]/);
}

exports.expressionExists = function(url){
  return getExpression(url) != null ? true : false;
}

var getLoop = function(url){
  var result = getExpression(url).toString().replace(/\[|\]/g, '').split(',');
  result = [parseInt(result[0]), parseInt(result[1]), parseInt(result[2])];
  return result;
}

var questionsSequenceOne = [{
    name: 'url',
    description: 'Please, enter the URL endpoint you want to dump',
    required: true,
    message: 'Insert a valid URL.',
    conform: function(url){
      return exports.validateURL(url);
    }
  },
  // TODO: Requests with intervals
  // {
  //     name: 'interval',
  //     patterns: '[yYnN]',
  //     message: 'Choose Yes or No for the question.',
  //     description: 'Do you want the requisitions make intervals? (y/N)',
  //     default: 'N'
  // }
];

// TODO: Requests with intervals
// var questionsSequenceTwo = {
//   name: 'seconds',
//   description: 'Enter the interval in seconds',
//   default: 20
// };

var writeToFile = function(buffer){
  fs.writeFile('dump_' + Date.parse(new Date()) + '.txt', buffer, function(){
    console.log('dump.txt generated succesfully!'.green);
  });
};

prompt.get(questionsSequenceOne, function(err, result){
  if (result != undefined){
    var url = result.url;
    var fullBody = '';

    checkUpdate({packageName: pkg.name, packageVersion: pkg.version, isCLI: true}, function(err, latestVersion, defaultMessage){
        if(!err){
            console.log(defaultMessage);
        }
    });  
    
    if (exports.expressionExists(url)){
      var loop = getLoop(url);
      var loopArray = doLoop(loop[0], loop[1], loop[2], url).then(function(){
        var len = body.length;
        body.forEach(function(content){
          fullBody += content;
        });
        
        writeToFile(fullBody);
        console.log('The loop was: '.green, loop)
      });
    } else{
      getBody(url).then(function(){
        writeToFile(body[0]);
      });
    }

    // TODO: Requests with intervals
    // if (result.interval.match(/[Yy]/))
    //   prompt.get(questionsSequenceTwo, function(err, result){
    //     var seconds = result.seconds;
    //   })
    
  }
});